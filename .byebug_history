continue
content["unit_symbols"]
content
continue
fields(norm_text)
fields
continue
units
continue
Unitsdb.units
Unitsdb.units[text]
text
Unitsdb.units[text]
Unitsdb.units[text]&
Unitsdb.units[text]&.dig(:fields, "unit_name")
Unitsdb.units[text]&.dig(:fields, "unit_name")&.first
text
Unitsdb.units[text]&.dig(:fields, "unit_name")&.first
Unit.new(text).unit_name
continue
text
Unit.new(text).unit_name
text
Unitsdb.units[text]&.dig(:fields, "unit_name")&.first
continue
Unitsdb.dimensions_hash
Unitsdb.dimensions_hash.keys
Unitsdb.dimensions_hash
Unitsdb.dimensions_hash.values.methods
Unitsdb.dimensions_hash.values.select(:vector)
Unitsdb.dimensions_hash.values.pluck
Unitsdb.dimensions_hash.values
dimsvector
dimhash
continue
dims_vector
Utility::DIMS_VECTOR
dims_vector
Utility::DIMS_VECTOR.first
continue
print h
puts h
h
continue
underscore(Utility::DIMS_VECTOR.first)
Utility::DIMS_VECTOR.first
Utility::DIMS_VECTOR.frst
Utility::DIMS_VECTOR
continue
prefixes_hash.keys.sort_by(&:length)
prefixes_hash.length
prefixes_hash
continue
print Ox.dump Utility.update_nodes(msup, [mrow_one, mrow_two])
Utility.update_nodes(msup, [mrow_one, mrow_two])
mrow_two = (Utility.ox_element("mrow") << Ox.parse(numerator_value))
mrow_one = (Utility.ox_element("mrow") << value)
msup = Utility.ox_element("msup")
Ox.parse numerator_value
numerator_value
print Ox.dump mrow
mrow
continue
fails[:unicode].length
fails[:unicode]
pp fails[:unicode]
puts fails[:unicode]
pp fails[:unicode]
fails[:unicode].length
fails
continue
asc
inde
continue
inde
unicode.flatten.uniq.length
unicode.flatten.length
unicode.length
continue
asc
asc.gsub(/−/, "-")
puts Unitsml.parse(asc.gsub(/−/, "-")).to_xml
continue
print formula.to_xml
formula.to_xml
formula
continue
Unitsml.parse(asc.gsub(/−|−/, "-"))
asc.gsub(/−|−/, "-")
continue
puts Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{"cd*m^(-2)"})\"")
puts Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{"cd*m^(−2)"})\"")
asc 
puts Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{"cd*m^(-2)"})\"")
puts Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{"cd*m(-2)"})\"")
puts Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{"cd*m"})\"")
puts Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{"cd"})\"")
puts Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
puts Unitsml.parse(asc.gsub(/−/, "-")).to_xml
puts Unitsml.parse(asc.gsub(/−/, "-")).to_xml, Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
Unitsml.parse(asc.gsub(/−/, "-")).to_xml, Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
continue
asc
print Unitsml.parse(asc.gsub(/−/, "-")).to_xml
Unitsml.parse(asc.gsub(/−/, "-")).to_xml
continue
asc
continue
asc
ASC
continue
asc
continue
print Unitsml.parse(asc).to_xml
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
continue
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
print Unitsml.parse(asc).to_xml
continue
asc
print Unitsml.parse(asc).to_xml
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
continue
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
print Unitsml.parse(asc).to_xml
continue
print Unitsml.parse(asc).to_xml
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
asc
continue
asc
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
print Unitsml.parse(asc).to_xml
continue
print Unitsml.parse(asc).to_xml
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
continue
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"#{asc}\"")
print Unitsml.parse(asc).to_xml
asc
continue
inde
continue
combine_prefixes(prefix_object(m[-1][:prefix]), prefix_object(k[:prefix]))
prefix_object(m[-1][:prefix])
continue
prefix_object(m[-1][:prefix])
m[-1][:prefix]
prefix_object(m[-1][:prefix])
prefix_object(k[:prefix])
combine_prefixes(prefix_object(m[-1][:prefix]), prefix_object(k[:prefix]))
continue
k[:prefix]
prefix_object(k[:prefix])
prefix_object(m[-1][:prefix])
combine_prefixes(prefix_object(m[-1][:prefix]), prefix_object(k[:prefix]))
continue
m.first
m.first[:prefix]
m.first[:unit]
m[0][:unit]
m[0]
m[1]
m.length
m
continue
m
continue
m.last[:unit].unit_name
m.last[:unit].unit
m.last[:unit].prefix
m.last[:unit]
m.last
m.first
m.length
m.le ngth
m
continue
m[-1][:unit]
m[-1][:prefix]
continue
exp
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"#{exp}\"")
exp
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{exp})\"")
print Asciimath2UnitsML::Conv.new.Asciimath2UnitsML("\"unitsml(#{asc})\"")
exp
print formula
formula
continue
prefix_name = prefix_object(k["prefix"])
prefix_name = prefix_object(Unitsdb.prefixes(k["prefix"]))
prefix_name = prefix_object(Unitsdb.prefixes.any?(k["prefix"]))
Unitsdb.prefixes.any?(k["prefix"])
Unitsdb.prefixes.include?(k["prefix"])
Unitsdb.prefixes
k["prefix"]
continue
combine_prefixes(nil, u.prefix)
combine_prefixes(prefix_object(prefix_name), u.prefix)
combine_prefixes(nil, u.prefix)
prefix_name
u.prefix
combine_prefixes(prefix_object(prefix_name), u.prefix)
combine_prefix(prefix_object(prefix_name), u.prefix)
u.prefix
prefix_object(prefix_name)
continue
combine_prefixes(prefix_object(prefix_name), u.prefix)
prefix_object(prefix_name)
u.prefix
prefix_name
continue
p
continue
p
continue
p
p2
p1
p.base == p1.base && p.power == p1.power + p2.power
continue
p.base == p1.base && p.power == p1.power + p2.power
continue
p.base == p1.base && p.power == p1.power + p2.power
continue
p.base == p1.base && p.power == p1.power + p2.power
continue
p.base == p1.base && p.power == p1.power + p2.power
p1.power + p2.power
p.power == p1.power + p2.power
p.base == p1.base
p.power
p
continue
p2.power
p1.power
p1.power + p2.power
p1.base
p2.base
p2
p1
continue
u.prefix
prefix_object(prefix_name)
continue
gather_units(units_list)[1][:prefix]
gather_units(units_list)[1]
gather_units(units_list)[1].prefix
gather_units(units_list)[1]
gather_units(units_list).first
gather_units(units_list).last
gather_units(units_list).length
gather_units(units_list)
continue
